{"version":3,"sources":["p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h3/Greeting.module.css","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/HW3.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Greeting","name","setNameCallback","addUser","error","totalUsers","inputErrorClass","s","className","value","onChange","onClick","GreetingContainer","users","addUserCallback","useState","setName","setError","length","e","currentTarget","trimmedName","trim","alert","HW3","setUsers","usersArray","_id","v1","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,MAAQ,0B,sLC2BnDC,EAjB+B,SAAC,GAEzC,IADFC,EACC,EADDA,KAAMC,EACL,EADKA,gBAAiBC,EACtB,EADsBA,QAASC,EAC/B,EAD+BA,MAAOC,EACtC,EADsCA,WAIlCC,EAAkBC,IAAEH,MAE1B,OACG,6BACG,2BAAOI,UAAWJ,EAAQE,EAAkB,GAAIG,MAAOR,EAAMS,SAAUR,IACvE,4BAAQS,QAASR,GAAjB,OACA,8CAAoBE,GACpB,yBAAKG,UAAU,SAASJ,KCiBlBQ,EA/BiD,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,gBAAqB,EACnEC,mBAAiB,IADkD,mBACpFd,EADoF,KAC9Ee,EAD8E,OAEjED,mBAAiB,IAFgD,mBAEpFX,EAFoF,KAE7Ea,EAF6E,KAkBvFZ,EAAaQ,EAAMK,OAEvB,OACG,kBAAC,EAAD,CACGjB,KAAMA,EACNC,gBAnBkB,SAACiB,GACtBH,EAAQG,EAAEC,cAAcX,QAmBrBN,QAhBU,WACb,IAAMkB,EAAcpB,EAAKqB,OACrBrB,GACDsB,MAAM,UAAD,OAAWtB,EAAX,MACLa,EAAgBO,IAEhBJ,EAAS,sBAWTb,MAAOA,EACPC,WAAYA,K,QCANmB,MAxBf,WAAgB,IAAD,EACcT,mBAA0B,IADxC,mBACLF,EADK,KACEY,EADF,KAQZ,OACG,6BACG,6BADH,cAKG,kBAAC,EAAD,CAAmBZ,MAAOA,EAAOC,gBAXf,SAACb,GACtB,IAAIyB,EAAa,CAACC,IAAKC,cAAM3B,KAAMA,GACnCwB,EAAS,GAAD,mBAAKZ,GAAL,CAAYa,QAWjB,6BAGA,+BCXMG,MAdf,WACI,OACI,yBAAKrB,UAAWD,IAAEsB,KACd,iDAGA,kBAAC,EAAD,QCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.e53c94ed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1Sc4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"someClass\":\"Greeting_someClass__uGflL\",\"error\":\"Greeting_error__1uvQ8\"};","import React, {ChangeEvent} from \"react\";\nimport s from \"./Greeting.module.css\";\n\ntype GreetingPropsType = {\n   name: string // need to fix any\n   setNameCallback: (e: ChangeEvent<HTMLInputElement>) => void // need to fix any\n   addUser: () => void // need to fix any\n   error: string  // need to fix any\n   totalUsers: number // need to fix any\n}\n// презентационная компонента (для верстальщика)\nconst Greeting: React.FC<GreetingPropsType> = (\n   {name, setNameCallback, addUser, error, totalUsers} // деструктуризация пропсов\n) => {\n\n\n   const inputErrorClass = s.error; // need to fix with (?:)\n\n   return (\n      <div>\n         <input className={error ? inputErrorClass : \"\"} value={name} onChange={setNameCallback}/>\n         <button onClick={addUser}>add</button>\n         <span>Total users: {totalUsers}</span>\n         <div className='error'>{error}</div>\n      </div>\n   );\n}\n\nexport default Greeting;\n","import React, {ChangeEvent, useState} from \"react\";\nimport Greeting from \"./Greeting\";\nimport {UserType} from \"./HW3\";\n\ntype GreetingContainerPropsType = {\n   users: Array<UserType> // need to fix any\n   addUserCallback: (name: string) => void // need to fix any\n}\n\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({users, addUserCallback}) => { // деструктуризация пропсов\n   const [name, setName] = useState<string>(\"\"); // need to fix any\n   const [error, setError] = useState<string>(\"\"); // need to fix any\n\n   const setNameCallback = (e: ChangeEvent<HTMLInputElement>) => { // need to fix any\n      setName(e.currentTarget.value); // need to fix\n   };\n\n   const addUser = () => {\n      const trimmedName = name.trim()\n      if (name) {\n         alert(`Hello  ${name}!`)\n         addUserCallback(trimmedName)\n      } else {\n         setError('Name is required!')\n      }\n   };\n\n   let totalUsers = users.length; // need to fix\n\n   return (\n      <Greeting\n         name={name}\n         setNameCallback={setNameCallback}\n         addUser={addUser}\n         error={error}\n         totalUsers={totalUsers}\n      />\n   );\n}\n\nexport default GreetingContainer;\n","import React, {useState} from \"react\";\nimport GreetingContainer from \"./GreetingContainer\";\nimport {v1} from \"uuid\";\n\n// types\nexport type UserType = {\n   _id: string // need to fix any\n   name: string // need to fix any\n}\n\n// уровень работы с глобальными данными\nfunction HW3() {\n   const [users, setUsers] = useState<Array<UserType>>([]); // need to fix any\n\n   const addUserCallback = (name: string) => {\n      let usersArray = {_id: v1(), name: name}\n      setUsers([...users, usersArray]);\n   }\n\n   return (\n      <div>\n         <hr/>\n         homeworks 3\n\n         {/*should work (должно работать)*/}\n         <GreetingContainer users={users} addUserCallback={addUserCallback}/>\n\n         <hr/>\n         {/*для личного творчества, могу проверить*/}\n         {/*<AlternativeGreeting/>*/}\n         <hr/>\n      </div>\n   );\n}\n\nexport default HW3;\n","import React from \"react\";\nimport s from \"./App.module.css\";\nimport HW2 from '../../../p2-homeworks/h2/HW2';\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\n\nfunction App() {\n    return (\n        <div className={s.App}>\n            <div>react homeworks:</div>\n            {/*<HW1/>*/}\n            {/*<HW2/>*/}\n            <HW3/>\n            {/*<HW4/>*/}\n            {/*<HW5/>*/}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./p1-main/m1-ui/u1-app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}